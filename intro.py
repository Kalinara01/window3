'''Введение в PostgreSQL. Создание БД, таблиц'''

'''PostgreSQL - Система управления базами данных. Набор программ, позволяющий организовать,
 контролировать и администрировать база данных'''

# MySQL, Firestore, MongoDB, SQLite...

'''Почему PostgreSQL'''
# 1. у него больше функция
# 2. объектно - реляционная система
# 3. расширяемая система
# 4. поддержка ACID
# А(atomacity) - атомарность
# С(consistency) - согласованность
# I(isolation) - изолированность
# D(durability) - стойкость


# Postgres - сама база данных

# БД - это организованная структура предназначенная для хранения, изменения и обработки взаимосвзянной информации

# SQL(Structure Query Language) - язык запросов в БД (для управления данными)


'''Команды'''
# sudo -i -u postgres - это вход в аккаунт
# exit - это для выхода
# sudo -u postgres psql - командная строка
# \q - выход
# psql 

# \du - просмотр списка юзеров
# \l -  просмотр списка БД

# CREATE USER name WHITH PASSWORD '';
# ALTER ROLE name WITH SUPERUSER CREATEROLE CREATEDB; ДАЕМ ПРИВИЛЕГИИ (ПРАВА)
# CREATE DATABASE name; создание БД
# DROP ROLE name - удаление юзера
# DROP DATABASE name; - удаления БД 

'''Типы полей в Post...'''
# 1. Numeric Type (числовые типы):
# a.smallint(2 bytes) - 32768 до 32768 - если ведем больше то будет ошибка
# b. integer (4 bytes) -> -200000000 до 200000000м (примерно)
# c. bigint (8 bytes) -9223372036854775808 до 9223372036854775808
# d. serial (4 bytes) - целые числа с автоинкрементом
# e. smallserial (2 bytes) - от 1 до 32768
# f. bigserial (8 bytes)от 1 до 9223372036854775808


# 2. Character Types (строковые\ текстовые типы)
# a. varchar(количество символов) - если укажем 50, но заполним 10, 
# то остальные будут свободны (занимает меньше памяти) VARCHAR(10) - test - 'test'
# b. char(количество символов) - строув с постоянной длиной. CHAR(10) - test - 'test      '
# c. text() - Неограниченное количество символов

# 3. Boolen Type:
# 3.1 byte - TRUE/False


# 4. date - календарная дата(год.месяц.день)
# 5. location - координатная точка - (254 -15) (x, y)








''' Ограничение (constraint)'''
# 1. UNIQUE - все значения в столбце должны быть уникальными
# 2. DEFAULT - У СТОЛБЦА будет значение по умолчанию
# 3. NULL I NIT NULL - определяет, будет ли столбец обязателен к заполнению
# 4. CHECK - используется для проверки значений столбца
# 5. PRIMARY KEY - определяет, будет ли столбец идентификатором(Первичный ключ)
# 6. FOREIGN KEY - задется для ссылки на другую таблицу.(Внешний ключ)



'''Свзяи'''
# one to one - одтн к одному
# один человек - щди id
# один автор - одна автобтография

# one to many - один ко многим
# один блогер - много постов
# одна мама - много детей
# один продукт - много комментариев
# один вайфай - много пользователей
# один куратор - много студентов

# many to many - многие ко многим
# один ментор - много студентов, один студент - много менторов
# одна аудитория - много студентов, один студент много аудиторий

# FOREICN KEY - Внешний ключ (с помощью него создается звязь)
# PRIMARY KEY - Первичный ключ ( по нему создается свзяь)


'''Join'''
# JOIN - инструкция, которая позволяет брать данные из нескольких таблиц (в запросах SELECT)
# INNER JOIN - достает только те записи, у которых есть связь
# FULL JOIN - достаются все записи с обоих таблиц 
# LEFT JOIN - достает все записи с левой таблицы, и с правой таблицы у которых есть связь левой таблицей
# RIGHT JOIN - достает все записи с правой таблицы, и с левой таблицы у которых есть связь с правой таблицей
# левая - до join, правая после join


'''Индекс'''
# типы индексов в postgres
# 1) B-tree
# 2) хеш
# 3) Gist
# 4) sp-gist
# 5) gin
# 6) brin
# по умолчанию создается один (b-tree)



'''Агрегационные функции: sum(), avg(), count(), min(), max()'''
# AVG() - находит среднее значение  
# case - как if else
# Выражение CASE работает также как и if/else
'''Синтаксис:
SELECT <COLUMN_NAME
'''

